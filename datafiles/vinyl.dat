// This Note asset contains configuration information for audio in your games. This functions only
// affect audio played by Vinyl functions. If live updating is enabled (VINYL_LIVE_UPDATE_PERIOD is
// set larger than 0, and VinylLiveUpdateSet() is set to <true>) then editing this Note asset will
// affect audio in-game. This allows you to adjust audio behaviour on the fly, speeding up mixing.
// 
// Configuration in this script can be defined using JSON, although the parser used to read JSON
// from this Note asset is very relaxed. You typically won't need to use "" quote marks for struct
// variable names (keys) and commas may be omitted if you're using a newline instead. The parser
// also allows the use of single line and multiline comments.
// 
// Don't forget that gain values measured in decibels, and pitch values are measured in percentages!



{
    // Label names must not contain spaces
    // Labels may have six properties defined:
    //   1. "gain", a number, the gain for the asset in decibels
    //   2. "pitch", a number, the pitch for the asset as a percentage, or a two-element array containing the minimum and maximum pitch values to randomize between
    //   3. "children", a dictionary containing labels that should inherit their parent's gain and pitch (applied multiplicatively)
    //   4. "loop", a boolean, whether the asset should default to looping when played. This is overriden by the [loop] argument in VinylPlay()
    //   5. "limit, a number indicating the maximum number of audio instances that can be played using this label
    //   6. "limit fade out rate", a number indicating the rate that audio should be faded out, in decibels per second
    //       N.B. Audio instances played under child labels count towards the limit counter for their parent label(s)
    
    labels: {
        music: {
            loop: true
            limit: 1
        }
        ambience: {
            loop: true
            limit: 1
        }
        menu: {}
        gameplay: {}
        sfx: {
            children: {
                speech: {
                    pitch: [0.9, 1.1]
                }
                footsteps: {
                    pitch: [0.8, 1.2]
                }
                ui: {}
            }
        }
    }
    
    
    
    // Audio assets may have three properties defined:
    //   1. "gain", a number, the gain for the asset in decibels
    //   2. "pitch", a number, the pitch for the asset as a percentage, or a two-element array containing the minimum and maximum pitch values to randomize between
    //   3. "label", a string containing the name of the label, or an array of label names. Label gain and pitch are applied multiplicatively if more than one label is defined
    // 
    // Any audio asset not explicitly defined uses the "fallback" audio asset definition
    
    assets: {
        fallback: {}
        sndChickenNuggets: {
            label: music
        }
        sndTestTone: {
            bus: test
        }
    }
    
    
    
    patterns: {
        random pitch test: {
            basic: sndTestTone
            pitch: [0.8, 1.2]
        }
        
        shuffle test: {
            shuffle: [
                sndTestTone
                sndChickenNuggets
            ]
        }
    }
    
    
    
    buses: {
        test: [
            {
                type: delay
            }
        ]
    }
}