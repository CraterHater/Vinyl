// Please see https://jujuadams.github.io/Vinyl for documentation



{
    knobs: {
        delayTime: {
            range: [0.3, 0.6]
            default: 0.3 //This value is clamped inside the range
        }
        
        reverbSize: 0.2 //If we use just a number then that's the default value and the range is 0 -> 1
    }
    
    
    
    labels: {
        music: {
            gain: 0.7
            loop: true
            limit: 1
        }
        sfx: {
            pitch: 1.1
            children: {
                speech: {
                    pitch: [0.75, 1.25]
                }
                echo: {
                    effect chain: echo
                }
            }
        }
    }
    
    
    
    assets: {
        sndChickenNuggets: {
            label: music
            loop point: [0.3, 2.8]
        }
        
        sndOw: {
            label: [sfx, speech]
        }
        
        sndCat: {
            label: sfx
        }
        
        sndBleep0: {
            label: sfx
            gain: 0.5
            copyTo: [sndBleep1,  sndBleep2,  sndBleep3,  sndBleep4,
                     sndBleep5,  sndBleep6,  sndBleep7,  sndBleep8,
                     sndBleep9, sndBleep10, sndBleep11]
        }
    }
    
    
    
    patterns: {
        space cat: {
            type: basic
            asset: sndCat
            gain: 0.2
            pitch: 0.5
            effect chain: echo
        }
        
        bleep shuffle: {
            type: shuffle
            assets: [sndBleep0, sndBleep1,   sndBleep2,  sndBleep3,
                     sndBleep4, sndBleep5,   sndBleep6,  sndBleep7,
                     sndBleep8, sndBleep9,  sndBleep10, sndBleep11]
        }
        
        queue test: {
            type: queue
            assets: [sndPop, sndPop, sndPop, sndPop, sndPop]
        }
        
        music sync test: {
            type: multi
            label: [music, echo]
            pitch: 0.9
            assets: [
                sndSync0
                sndSync1
                sndSync2
                sndSync3
            ]
        }
    }
    
    
    
    effect chains: {
        echo: [
            {
                type: delay
                time: @delayTime
                mix: 0.4
            }
            {
                type: reverb
                size: @reverbSize
                mix: 0.3
            }
            {
                type: gain
                gain: 2
            }
        ]
    }
}